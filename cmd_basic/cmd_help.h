/********************************************************************************/
/*																				*/
/*  This file is part of source codes of program Graph.							*/
/*  Program was developed as an course work of subject "Graph theory".			*/
/*																				*/
/*	Contacts:																	*/
/*		E-mail:	arsen.gharagyozyn.96@gmail.com									*/
/*		Phone:	+374 77 006 861													*/
/*																				*/
/*  Copyright Arsen Gharagyozyan © 2018 Armenia, Yerevan						*/
/*																				*/
/********************************************************************************/

#ifndef CMD_HELP_H
#define CMD_HELP_H

#include "cmd_include.h"
#include <map>

typedef std::map<std::string, std::string> THelpAssistant;

// -----  Help assistants  ------------------------------------------------------------------------------------------ //

const THelpAssistant g_ha_CMD =
{
	{ "help"									, "Show information about command." },
	{ "new"										, "Create new object." },
	{ "find"									, "Find an element." },
	{ "delete"									, "Delete object." },
	{ "set"										, "Set current graph." },
	{ "save"									, "Save graph." },
	{ "load"									, "Load graph." },
	{ "print"									, "Print infromation about graph." },
	{ "exit"									, "Exit from program." }
};

const THelpAssistant g_ha_CMDNew =
{
	{ "new graph"								, "Create a graph with default generated name." },
	{ "new graph [name]"						, "Create a graph with specifed [name]." },
	{ "new vertex"								, "Create a vertex with default generated name." },
	{ "new vertex [name]"						, "Create a vertex  with specified [name]." },
	{ "new vertex [name] [name] ..."			, "Create vertices from given [name list]." },
	{ "new vertex [number]"						, "Create [number] instances of vertices. Names will be generated by default." },
	{ "new edge {V1} {V2}"						, "Create an edge with default generated name joining vertices {V1} and {V2}." },
	{ "new edge {V1} {V2} [name]"				, "Create an edge with specified [name] joining vertices {V1} and {V2}." }
};

const THelpAssistant g_ha_CMDPrint =
{
	{ "print name"								, "Print the name of selected graph." },
	{ "print names"								, "Print names of all graphs." },
	{ "print graph"								, "Print the selected graph." },
	{ "print graph [name]"						, "Print the graph with specified name." }
};

const THelpAssistant g_ha_CMDFind =
{
	{ "find vertex {name}"						, "Find vertex by name in selected graph." },
	{ "find edge {name}"						, "Find edge by name." },
	{ "find graph {name}"						, "Find graph by name." },
	{ "find path {V1} {V2}"						, "Find path between 2 vertices starting from {V1} to {V2}." }
};

const THelpAssistant g_ha_CMDHelp =
{
	{ "help"									, "Show command list." },
	{ "help [command]"							, "Show help about specific [command]."}
};

class CCMDHelp : public ICommand
{
	const THelpAssistant *m_pHelpAssistant;

public:
	// Constructor
	CCMDHelp(ICommand *pParent = nullptr, std::string strIName = "help");
	// Destructor
	~CCMDHelp() = default;
	// Execute CMD
	CResult Execute(IType *& pObject) override;

	// Set help assistant
	virtual inline void SetHelpAssistant(const THelpAssistant *const pHAssist) { m_pHelpAssistant = pHAssist; }
	// Get help assistant
	virtual inline const THelpAssistant *const GetHelpAssistant() { return m_pHelpAssistant; }
};

#endif